.. java:import:: android.support.annotation NonNull

.. java:import:: android.util Log

.. java:import:: com.fasterxml.jackson.databind.node ArrayNode

.. java:import:: com.fasterxml.jackson.databind.node JsonNodeFactory

.. java:import:: com.fasterxml.jackson.databind.node ObjectNode

.. java:import:: org.json JSONException

.. java:import:: java.io IOException

.. java:import:: java.util ArrayList

.. java:import:: java.util Iterator

.. java:import:: java.util List

.. java:import:: java.util Map

.. java:import:: fi.lbd.mobile.location PointLocation

.. java:import:: fi.lbd.mobile.mapobjects MapObject

.. java:import:: fi.lbd.mobile.messaging.messageobjects MessageObject

BasicBackendHandler
===================

.. java:package:: fi.lbd.mobile.backendhandler
   :noindex:

.. java:type:: public class BasicBackendHandler implements BackendHandler

   Handles the map objects. Fetches the requested objects from backend service. Created by Tommi.

Fields
------
RETRY_AMOUNT
^^^^^^^^^^^^

.. java:field:: protected static final int RETRY_AMOUNT
   :outertype: BasicBackendHandler

urlProvider
^^^^^^^^^^^

.. java:field:: protected final UrlProvider urlProvider
   :outertype: BasicBackendHandler

urlReader
^^^^^^^^^

.. java:field:: protected final UrlReader urlReader
   :outertype: BasicBackendHandler

Constructors
------------
BasicBackendHandler
^^^^^^^^^^^^^^^^^^^

.. java:constructor:: public BasicBackendHandler(UrlReader urlReader, UrlProvider urlProvider)
   :outertype: BasicBackendHandler

   Handles the map objects. Fetches the requested objects from backend service.

   :param urlReader:
   :param urlProvider:

Methods
-------
deleteMessage
^^^^^^^^^^^^^

.. java:method:: @Override public HandlerResponse<MessageObject> deleteMessage(String messageId)
   :outertype: BasicBackendHandler

getCollections
^^^^^^^^^^^^^^

.. java:method:: @Override public HandlerResponse<String> getCollections(String url)
   :outertype: BasicBackendHandler

getMapObject
^^^^^^^^^^^^

.. java:method:: @Override public HandlerResponse<MapObject> getMapObject(String id)
   :outertype: BasicBackendHandler

getMessages
^^^^^^^^^^^

.. java:method:: @Override public HandlerResponse<MessageObject> getMessages()
   :outertype: BasicBackendHandler

getObjectsFromSearch
^^^^^^^^^^^^^^^^^^^^

.. java:method:: @Override public HandlerResponse<MapObject> getObjectsFromSearch(List<String> fromFields, String searchString, int limit, boolean mini)
   :outertype: BasicBackendHandler

getObjectsInArea
^^^^^^^^^^^^^^^^

.. java:method:: @Override public HandlerResponse<MapObject> getObjectsInArea(PointLocation southWest, PointLocation northEast, boolean mini)
   :outertype: BasicBackendHandler

getObjectsNearLocation
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: @Override public HandlerResponse<MapObject> getObjectsNearLocation(PointLocation location, double range, boolean mini)
   :outertype: BasicBackendHandler

getUsers
^^^^^^^^

.. java:method:: @Override public HandlerResponse<String> getUsers()
   :outertype: BasicBackendHandler

postMessage
^^^^^^^^^^^

.. java:method:: @Override public HandlerResponse<MessageObject> postMessage(String receiver, String topic, Object message, List<String> attachedObjectIds)
   :outertype: BasicBackendHandler

updateMapObject
^^^^^^^^^^^^^^^

.. java:method:: @Override public HandlerResponse<MapObject> updateMapObject(MapObject updatedMapObject)
   :outertype: BasicBackendHandler

   Updates the given map object to the backend, gets the object with the updated object if from the backed and checks if the update has succeeded.

   :param updatedMapObject: Object which should be updated.

